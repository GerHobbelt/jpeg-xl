# Copyright (c) the JPEG XL Project Authors. All rights reserved.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Workflow for building the release binaries.
#
# This workflow runs as a post-submit step, when pushing to main or the release
# branches (v*.*.x), and when creating a release in GitHub.
#
# In the GitHub release case, in addition to build the release binaries it also
# uploads the binaries to the given release automatically.

name: Release build / deploy
on:
  push:
    branches:
      - main
      - v*.*.x
  release:
    types: [ published ]

jobs:
  # Build a .deb package for the ubuntu-latest
  release_ubuntu_pkg:
    name: .deb packages / ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
        - ubuntu:20.04
        - ubuntu:18.04
        - debian:buster
        - debian:bullseye

    container:
      image: ${{ matrix.os }}

    steps:
    - name: Set env
      shell: 'bash'
      id: 'env'
      run: |
        artifact_name="jxl-debs-amd64-${matrix_os/:/-}"
        echo ${artifact_name}
        echo "::set-output name=artifact_name::${artifact_name}"
      env:
        matrix_os: ${{ matrix.os }}

    - name: Install build deps
      run: |
        apt update
        DEBIAN_FRONTEND=noninteractive apt install -y \
          build-essential \
          devscripts \
        #

    - name: Install git (only 18.04)
      if: matrix.os == 'ubuntu:18.04'
        # Ubuntu 18.04 ships with git 2.17 but we need 2.18 or newer for
        # actions/checkout@v2 to work
      shell: 'bash'
      run: |
        apt install -y \
          libcurl4-openssl-dev \
          libexpat1-dev \
          libssl-dev \
          wget \
          zlib1g-dev \
        #
        git_version="2.32.0"
        wget -nv \
          "https://github.com/git/git/archive/refs/tags/v${git_version}.tar.gz"
        tar -zxf "v${git_version}.tar.gz"
        cd "git-${git_version}"
        make prefix=/usr -j4 install

    - name: Checkout the source
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 1

    - name: Install gtest (only 18.04)
      if: matrix.os == 'ubuntu:18.04'
        # In Ubuntu 18.04 no package installed the libgtest.a. libgtest-dev
        # installs the source files only.
      run: |
        apt install -y libgtest-dev cmake
        for prj in googletest googlemock; do
          (cd /usr/src/googletest/${prj}/ &&
           cmake CMakeLists.txt -DCMAKE_INSTALL_PREFIX=/usr &&
           make all install)
        done
        # Remove libgmock-dev dependency in Ubuntu 18.04. It doesn't exist there.
        sed '/libgmock-dev,/d' -i debian/control

    - name: Build hwy
      run: |
        apt build-dep -y ./third_party/highway
        ./ci.sh debian_build highway
        dpkg -i build/debs/libhwy-dev_*_amd64.deb

    - name: Build libjxl
      run: |
        apt build-dep -y .
        ./ci.sh debian_build jpeg-xl

    - name: Stats
      run: |
        ./ci.sh debian_stats

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.env.outputs.artifact_name }}
        path: |
          build/debs/*jxl*.*

    - name: Package release tarball
      if: github.event_name == 'release'
      run: |
        (cd build/debs/; find -maxdepth 1 -name '*jxl*.*') | \
        tar -zcvf release_file.tar.gz -C build/debs/ -T -

    - name: Upload binaries to release
      if: github.event_name == 'release'
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: release_file.tar.gz
        asset_name: ${{ steps.env.outputs.artifact_name }}-${{ github.event.release.tag_name }}.tar.gz
        tag: ${{ github.ref }}
        overwrite: true
